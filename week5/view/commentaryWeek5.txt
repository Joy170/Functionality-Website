Commentary Week 5:
Each week you are asked to comment on an aspect of your site. This week you are asked to:
(200 words) Show how you have made the form safe:
I changed the registration and login forms to make them more secure. I added captcha from google on both. This makes users tick a box to ensure that they are not a bot. They can only continue onto the following page if the captcha is recognized as being ticked. If a user fails to do this, an alert will pop up telling them what has gone wrong. This feature prevents bots from automatically submitting the forms on my website.
Furthermore, I used the string function from PHP to eliminate special characters in the input of the forms. “mysql_real_escape_string” helps avoid SQL injections and is implemented before the data entered by the user is inserted into the database. I prevented users from inputting” <” and “>” to ensure that hackers cannot execute JS scripts or other code injection that could mess up the website.
Additionally, I implemented a “pattern” that requires a lowercase, uppercase and numbers to be added into the input field of the HTML form for the passwords, that ensures that the users chosen passwords are more complicated. This makes it more difficult for hackers to hack the passwords.
Inserting the information from the forms into the database is done using prepared statements in SQL; as prepared statements bind variables which are then sent to the database which is more secure and help prevent SQL injections.
(50 words each) Highlight 4 security features that add to your site or are weak within your site.
A weakness of my website is the obvious file and directory organisation, the URL gives away a lot of information to the users, which could be used as an advantage by hackers. Instead of having my login page called login.php I could replace it with “qrhd87sj.php” making it less predictable.
My site has the added advantage that only the hashed version of the passwords are saved in the database. This means that the passwords won’t be stored in a raw format, so that if a hacker gets access to the database, the passwords would first have to be encrypted. 
I ensured that the database fields holding the values inputted by the users held a correct field length. For example, the longest phone number can have 14 characters, so I minimized the database to integer 14. The same thing was done for all other fields, like the first name was reduced to 30 characters, usually they are known to not exceed this length.
Lastly, I do not display any error messages to the users. They could display sensitive information about my site, therefore helping potential hackers to gather data and find loopholes within the code. The error message could be used to their advantage; I used error messages while coding but removed them once the problem has been fixed.
 
